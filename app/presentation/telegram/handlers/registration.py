import os
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.domain.entities.telegram_states import RegistrationStates
from app.application.services.telegram_service import TelegramService
from app.presentation.telegram.keyboards.menu import get_manager_menu_keyboard, get_admin_menu_keyboard, get_waiter_menu_keyboard
from app.presentation.telegram.keyboards.locale import ButtonTexts
from app.infrastructure.repositories.crud import get_user_by_telegram_id, get_user_by_username, create_user
from app.domain.entities.schemas import UserCreate
from app.presentation.telegram.utils import get_db_session, send_welcome_message, handle_database_error
from dotenv import load_dotenv

load_dotenv()

ADMIN_ID = os.getenv("ADMIN_ID", "861742986")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "boba")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "paper1234")

logger = logging.getLogger(__name__)
registration_router = Router()

@registration_router.message(Command("myid"))
async def cmd_myid(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id  # type: ignore
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    first_name = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    await message.answer(
        f"üîç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üÜî Telegram ID: {user_id}\n"
        f"üë§ Username: @{username}\n"
        f"üìù –ò–º—è: {first_name}\n\n"
        f"–¢–µ–∫—É—â–∏–π ADMIN_ID –≤ —Å–∏—Å—Ç–µ–º–µ: {ADMIN_ID}"
    )

@registration_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id # type: ignore
    async with get_db_session() as db:
        try:
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. ADMIN_ID: {ADMIN_ID}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            if str(user_id) == ADMIN_ID:
                admin = get_user_by_username(db, ADMIN_USERNAME)
                if not admin:
                    user_data = UserCreate(
                        username=ADMIN_USERNAME,
                        password=ADMIN_PASSWORD,
                        role="admin"
                    )
                    admin = create_user(db, user_data)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                    assert message.from_user is not None
                    admin.telegram_id = message.from_user.id  # type: ignore
                    admin.telegram_username = message.from_user.username  # type: ignore
                    admin.telegram_first_name = message.from_user.first_name  # type: ignore
                    admin.telegram_last_name = message.from_user.last_name  # type: ignore
                    admin.is_telegram_user = True  # type: ignore
                    db.commit()
                    
                    await message.answer(
                        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"–õ–æ–≥–∏–Ω: {ADMIN_USERNAME}\n"
                        f"–ü–∞—Ä–æ–ª—å: {ADMIN_PASSWORD}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                        reply_markup=get_admin_menu_keyboard()
                    )
                    return
                else:
                    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await send_welcome_message(message, admin, "admin")
                    return
            
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            start_param = message.text.split()[1] if message.text and len(message.text.split()) > 1 else None
            
            if not start_param or not start_param.startswith("invite_"):
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞
                await message.answer(
                    "ü§ñ TastySkills Bot\n\n"
                    "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            invitation_code = start_param[7:]
            invitation_data = TelegramService.process_invitation_code(db, invitation_code)
            
            if not invitation_data:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = get_user_by_telegram_id(db, user_id)
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await send_welcome_message(message, existing_user, existing_user.role)  # type: ignore
                return
            
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
            if invitation_data["type"] == "manager_link":
                await state.update_data(
                    registration_type="waiter",
                    manager_id=invitation_data["manager_id"]
                )
                await state.set_state(RegistrationStates.waiting_for_username)
                await message.answer(
                    f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
                    f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n"
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {invitation_data['manager_username']}\n"
                    f"–í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç.\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
                )
            elif invitation_data["type"] == "admin_manager_invitation":
                await state.update_data(
                    registration_type="manager",
                    invitation_id=invitation_data["invitation_id"]
                )
                await state.set_state(RegistrationStates.waiting_for_username)
                await message.answer(
                    f"üëë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                    f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n"
                    f"–í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
                )
            else:
                await state.update_data(
                    registration_type="waiter",
                    invitation_id=invitation_data["invitation_id"],
                    manager_id=invitation_data["manager_id"]
                )
                await state.set_state(RegistrationStates.waiting_for_username)
                await message.answer(
                    f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\n\n"
                    f"‚úÖ –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n"
                    f"–í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç.\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
                )
        except Exception as e:
            await handle_database_error(message, e, "–æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start")

@registration_router.message(RegistrationStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext) -> None:
    username = message.text.strip() if message.text else ""
    is_valid, error_msg = TelegramService.validate_username(username)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(username=username)
    await state.set_state(RegistrationStates.waiting_for_password)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n"
        "(–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

@registration_router.message(RegistrationStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext) -> None:
    password = message.text if message.text else ""
    is_valid, error_msg = TelegramService.validate_password(password)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(password=password)
    user_data = await state.get_data()
    registration_type = user_data.get('registration_type', 'waiter')
    if registration_type == "manager":
        await complete_registration(message, state, "manager")
    else:
        await complete_registration(message, state, "waiter")

async def complete_registration(message: Message, state: FSMContext, role: str = "waiter") -> None:
    user_data = await state.get_data()
    username = user_data.get('username')
    password = user_data.get('password')
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: username={username}, role={role}")
    if not username or not password:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}, —Ä–æ–ª—å: {role}")
    
    async with get_db_session() as db:
        try:
            assert message.from_user is not None
            telegram_data = {
                'id': message.from_user.id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name
            }
            user = TelegramService.register_user(
                db=db,
                username=username,
                password=password,
                role=role,
                telegram_data=telegram_data,
                manager_id=user_data.get('manager_id'),
                invitation_id=user_data.get('invitation_id')
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user.id}")
            if role == "manager":
                await message.answer(
                    f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –õ–æ–≥–∏–Ω: {username}\n"
                    f"üëë –†–æ–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '{ButtonTexts.INVITATION_LINK}'",
                    reply_markup=get_manager_menu_keyboard()
                )
            else:
                await message.answer(
                    f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –õ–æ–≥–∏–Ω: {username}\n"
                    f"üëë –†–æ–ª—å: –û—Ñ–∏—Ü–∏–∞–Ω—Ç\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é.\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://...",
                    reply_markup=get_waiter_menu_keyboard()
                )
            await state.clear()
        except Exception as e:
            await handle_database_error(message, e, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
