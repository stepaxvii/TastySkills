from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from app.infrastructure.database.database import SessionLocal
from app.infrastructure.repositories.crud import get_user_by_telegram_id, get_user_by_username
from app.application.services.telegram_service import TelegramService
from app.presentation.telegram.keyboards import get_admin_menu_keyboard
from aiogram.types import CallbackQuery
import os
import logging
from dotenv import load_dotenv

load_dotenv()

ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "boba")
logger = logging.getLogger(__name__)

admin_router = Router()

def is_admin_user(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user and (user.role == "admin" or user.username == ADMIN_USERNAME)

@admin_router.message(F.text == "üëë –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
async def create_manager_invitation(message: Message, bot: Bot) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    db = SessionLocal()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ telegram_id, –∑–∞—Ç–µ–º –ø–æ username
        user = get_user_by_telegram_id(db, user_id)
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id {user_id}: {user}")
        
        if not user:
            user = get_user_by_username(db, ADMIN_USERNAME)
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username {ADMIN_USERNAME}: {user}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user={user}, is_admin={is_admin_user(user)}")
        
        if not is_admin_user(user):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
            return
        
        bot_username = (await bot.get_me()).username or ""
        manager_link = TelegramService.create_admin_manager_invitation_link(db, user, bot_username)
        
        # –ò–∑–≤–ª–µ—á—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
        invite_code = None
        if manager_link and 'invite_' in manager_link:
            invite_code = manager_link.split('invite_')[-1]
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
        copy_code_kb = None
        if invite_code:
            copy_code_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_manager_code:{invite_code}")]
                ]
            )
        
        await message.answer(
            f"üëë –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ TastySkills:\n\n"
            f"üîó {manager_link}\n"
            + (f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {invite_code}\n" if invite_code else ""),
            reply_markup=copy_code_kb
        )
        await message.answer(
            "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ TastySkills.\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    finally:
        db.close()

@admin_router.callback_query(F.data.startswith("copy_manager_code:"))
async def copy_manager_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    if not callback.data:
        await callback.answer("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return
    code = callback.data.split(":", 1)[-1]
    if not callback.message:
        await callback.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.", show_alert=True)
        return
    await callback.answer("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
    await callback.message.answer(f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {code}")

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_admin_statistics(message: Message) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    db = SessionLocal()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ telegram_id, –∑–∞—Ç–µ–º –ø–æ username
        user = get_user_by_telegram_id(db, user_id)
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id {user_id}: {user}")
        
        if not user:
            user = get_user_by_username(db, ADMIN_USERNAME)
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username {ADMIN_USERNAME}: {user}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: user={user}, is_admin={is_admin_user(user)}")
        
        if not is_admin_user(user):
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            return
        
        stats = TelegramService.get_admin_statistics(db)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TastySkills\n\n"
        stats_text += f"üëë –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['managers_count']}\n"
        stats_text += f"üë§ –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {stats['waiters_count']}\n\n"
        
        if stats['managers_info']:
            stats_text += "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            for i, manager in enumerate(stats['managers_info'], 1):
                stats_text += f"{i}. {manager['username']}\n"
                stats_text += f"   –ò–º—è: {manager['telegram_name']}\n"
                stats_text += f"   –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {manager['waiters_count']}\n"
                stats_text += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {manager['created_at']}\n\n"
        else:
            stats_text += "üìã –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        
        await message.answer(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        db.close() 