from aiogram import Router, F, Bot
from aiogram.types import Message
from app.application.services.telegram_service import TelegramService
from aiogram.types import CallbackQuery
from app.presentation.telegram.utils import (
    get_db_session, get_user_safely, is_admin_user, 
    extract_invite_code_from_link,
    get_role_permission_message, handle_database_error
)
from app.presentation.telegram.keyboards.common import create_copy_code_keyboard
from app.presentation.telegram.keyboards.callback_data.registration import CDCopyManagerCode
from app.presentation.telegram.keyboards.locale import ButtonTexts
import logging

logger = logging.getLogger(__name__)
admin_router = Router()

@admin_router.message(F.text == ButtonTexts.INVITE_MANAGER)
async def create_manager_invitation(message: Message, bot: Bot) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    
    async with get_db_session() as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
            user = get_user_safely(db, user_id)
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id {user_id}: {user}")
            
            if not is_admin_user(user):
                await message.answer(get_role_permission_message("admin", "—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"))
                return
            
            bot_username = (await bot.get_me()).username or ""
            manager_link = TelegramService.create_admin_manager_invitation_link(db, user, bot_username)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            invite_code = extract_invite_code_from_link(manager_link)
            copy_code_kb = create_copy_code_keyboard(invite_code, "manager")
            
            await message.answer(
                f"üëë –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ TastySkills:\n\n"
                f"üîó {manager_link}\n"
                + (f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {invite_code}\n" if invite_code else ""),
                reply_markup=copy_code_kb
            )
            await message.answer(
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ TastySkills.\n"
                "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        except Exception as e:
            await handle_database_error(message, e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

@admin_router.callback_query(CDCopyManagerCode.filter())
async def copy_manager_code_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    if not callback.message:
        await callback.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    callback_data = CDCopyManagerCode.unpack(callback.data)
    code = callback_data.invite_code
    
    await callback.answer("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
    await callback.message.answer(f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {code}")

@admin_router.message(F.text == ButtonTexts.STATISTICS)
async def show_admin_statistics(message: Message) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    
    async with get_db_session() as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
            user = get_user_safely(db, user_id)
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id {user_id}: {user}")
            
            if not is_admin_user(user):
                await message.answer(get_role_permission_message("admin", "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
                return
            
            stats = TelegramService.get_admin_statistics(db)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TastySkills\n\n"
            stats_text += f"üëë –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {stats['managers_count']}\n"
            stats_text += f"üë§ –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {stats['waiters_count']}\n\n"
            
            if stats['managers_info']:
                stats_text += "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
                for i, manager in enumerate(stats['managers_info'], 1):
                    stats_text += f"{i}. {manager['username']}\n"
                    stats_text += f"   –ò–º—è: {manager['telegram_name']}\n"
                    stats_text += f"   –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {manager['waiters_count']}\n"
                    stats_text += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {manager['created_at']}\n\n"
            else:
                stats_text += "üìã –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            
            await message.answer(stats_text)
        except Exception as e:
            await handle_database_error(message, e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
