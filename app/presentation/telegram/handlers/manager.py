from aiogram import Router, F, Bot
from aiogram.types import Message
from app.application.services.telegram_service import TelegramService
from aiogram.types import CallbackQuery
from app.presentation.telegram.utils import (
    get_db_session, get_user_safely, is_manager_user,
    create_copy_code_keyboard, extract_invite_code_from_link,
    get_role_permission_message, handle_database_error
)

manager_router = Router()

@manager_router.message(F.text == "üìã –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def create_invitation(message: Message, bot: Bot) -> None:
    assert message.from_user is not None
    user_id = message.from_user.id
    
    async with get_db_session() as db:
        try:
            user = get_user_safely(db, user_id)
            if not is_manager_user(user):
                await message.answer(get_role_permission_message("manager", "—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"))
                return
            
            bot_username = (await bot.get_me()).username or ""
            waiter_link = TelegramService.create_manager_invitation_link(db, user, bot_username)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            invite_code = extract_invite_code_from_link(waiter_link)
            copy_code_kb = create_copy_code_keyboard(invite_code, "copy_invite_code")
            
            await message.answer(
                f"üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ TastySkills:\n\n"
                f"üîó {waiter_link}\n"
                + (f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {invite_code}\n" if invite_code else ""),
                reply_markup=copy_code_kb
            )
            await message.answer(
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ TastySkills."
            )
        except Exception as e:
            await handle_database_error(message, e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥'
@manager_router.callback_query(F.data.startswith("copy_invite_code:"))
async def copy_invite_code_callback(callback: CallbackQuery):
    if not callback.data:
        await callback.answer("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return
    code = callback.data.split(":", 1)[-1]
    if not callback.message:
        await callback.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.", show_alert=True)
        return
    await callback.answer("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
    await callback.message.answer(f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {code}")

@manager_router.message(F.text == "üë• –ú–æ–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã")
async def show_waiters(message: Message) -> None:
    assert message.from_user is not None
    user_id = message.from_user.id
    
    async with get_db_session() as db:
        try:
            user = get_user_safely(db, user_id)
            if not is_manager_user(user):
                await message.answer(get_role_permission_message("manager", "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤"))
                return
            
            manager_id = int(getattr(user, 'id', 0))
            waiters = TelegramService.get_manager_waiters(db, manager_id)
            if waiters:
                waiters_text = f"üë• –í–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã ({len(waiters)}):\n\n"
                for i, waiter in enumerate(waiters, 1):
                    waiters_text += f"{i}. {waiter.username}\n"
                    if waiter.telegram_first_name:  # type: ignore
                        waiters_text += f"   –ò–º—è: {waiter.telegram_first_name}\n"
                    waiters_text += f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {waiter.created_at.strftime('%d.%m.%Y')}\n\n"
            else:
                waiters_text = "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞."
            await message.answer(waiters_text)
        except Exception as e:
            await handle_database_error(message, e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤")

@manager_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤")
async def show_manager_statistics(message: Message) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    
    async with get_db_session() as db:
        try:
            user = get_user_safely(db, user_id)
            if not is_manager_user(user):
                await message.answer(get_role_permission_message("manager", "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤"))
                return
            
            manager_id = int(getattr(user, 'id', 0))
            stats = TelegramService.get_manager_statistics(db, manager_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤\n\n"
            stats_text += f"üë§ –í—Å–µ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {stats['total_waiters']}\n"
            stats_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_waiters']}\n"
            stats_text += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['inactive_waiters']}\n\n"
            
            if stats['waiters_by_date']:
                stats_text += "üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º:\n"
                for date, count in sorted(stats['waiters_by_date'].items()):
                    stats_text += f"   {date}: {count} —á–µ–ª.\n"
                stats_text += "\n"
            
            if stats['waiters_list']:
                stats_text += "üìã –°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤:\n\n"
                for i, waiter in enumerate(stats['waiters_list'], 1):
                    status = "‚úÖ" if waiter['is_active'] else "‚ùå"
                    stats_text += f"{i}. {waiter['username']} {status}\n"
                    stats_text += f"   –ò–º—è: {waiter['telegram_name']}\n"
                    stats_text += f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {waiter['created_at']}\n\n"
            else:
                stats_text += "üìã –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
            
            await message.answer(stats_text)
        except Exception as e:
            await handle_database_error(message, e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@manager_router.message(F.text == "üçΩÔ∏è –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é")
async def open_menu(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –ø–æ —Å—Å—ã–ª–∫–µ: http://localhost:8000/")

@manager_router.message(F.text == "üçΩÔ∏è –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ–Ω—é")
async def start_create_restaurant(message: Message) -> None:
    async with get_db_session() as db:
        try:
            if not message.from_user:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
                return
            user = get_user_safely(db, message.from_user.id)
            if not is_manager_user(user):
                await message.answer(get_role_permission_message("manager", "—Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω"))
                return
            
            from app.infrastructure.repositories.crud import get_restaurants_by_manager
            manager_id = int(getattr(user, 'id', 0))
            restaurants = get_restaurants_by_manager(db, manager_id)
            if not restaurants:
                await message.answer(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:\n"
                    "http://localhost:8000/manage/restaurants/create"
                )
            else:
                restaurant = restaurants[0]
                await message.answer(
                    f"–í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n"
                    f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ–Ω—é: http://localhost:8000/restaurants/{restaurant.id}"
                )
        except Exception as e:
            await handle_database_error(message, e, "—Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
