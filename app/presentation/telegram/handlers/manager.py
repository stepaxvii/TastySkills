from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from app.infrastructure.database.database import SessionLocal
from app.infrastructure.repositories.crud import get_user_by_telegram_id
from app.application.services.telegram_service import TelegramService
from app.presentation.telegram.keyboards import get_manager_menu_keyboard
from aiogram.types import CallbackQuery

manager_router = Router()

@manager_router.message(F.text == "üìã –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
async def create_invitation(message: Message, bot: Bot) -> None:
    assert message.from_user is not None
    user_id = message.from_user.id
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, user_id)
        if not user or user.role != "manager":  # type: ignore
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        bot_username = (await bot.get_me()).username or ""
        waiter_link = TelegramService.create_manager_invitation_link(db, user, bot_username)
        # –ò–∑–≤–ª–µ—á—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏
        invite_code = None
        if waiter_link and 'invite_' in waiter_link:
            invite_code = waiter_link.split('invite_')[-1]
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
        copy_code_kb = None
        if invite_code:
            copy_code_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_invite_code:{invite_code}")]
                ]
            )
        if user.waiter_link == waiter_link:  # type: ignore
            await message.answer(
                f"üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ TastySkills:\n\n"
                f"üîó {waiter_link}\n"
                + (f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {invite_code}\n" if invite_code else ""),
                reply_markup=copy_code_kb
            )
            await message.answer(
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ TastySkills."
            )
        else:
            await message.answer(
                f"üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ TastySkills:\n\n"
                f"üîó {waiter_link}\n"
                + (f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {invite_code}\n" if invite_code else ""),
                reply_markup=copy_code_kb
            )
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥'
@manager_router.callback_query(F.data.startswith("copy_invite_code:"))
async def copy_invite_code_callback(callback: CallbackQuery):
    if not callback.data:
        await callback.answer("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return
    code = callback.data.split(":", 1)[-1]
    if not callback.message:
        await callback.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞.", show_alert=True)
        return
    await callback.answer("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
    await callback.message.answer(f"–ö–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {code}")

@manager_router.message(F.text == "üë• –ú–æ–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã")
async def show_waiters(message: Message) -> None:
    assert message.from_user is not None
    user_id = message.from_user.id
    db = SessionLocal()
    try:
        user = get_user_by_telegram_id(db, user_id)
        if not user or user.role != "manager":  # type: ignore
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
            return
        manager_id = int(getattr(user, 'id', 0))
        waiters = TelegramService.get_manager_waiters(db, manager_id)
        if waiters:
            waiters_text = f"üë• –í–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã ({len(waiters)}):\n\n"
            for i, waiter in enumerate(waiters, 1):
                waiters_text += f"{i}. {waiter.username}\n"
                if waiter.telegram_first_name:  # type: ignore
                    waiters_text += f"   –ò–º—è: {waiter.telegram_first_name}\n"
                waiters_text += f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {waiter.created_at.strftime('%d.%m.%Y')}\n\n"
        else:
            waiters_text = "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞."
        await message.answer(waiters_text)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
    finally:
        db.close()

@manager_router.message(F.text == "üçΩÔ∏è –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é")
async def open_menu(message: Message) -> None:
    await message.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –ø–æ —Å—Å—ã–ª–∫–µ: http://localhost:8000/")

@manager_router.message(F.text == "üçΩÔ∏è –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ–Ω—é")
async def start_create_restaurant(message: Message) -> None:
    db = SessionLocal()
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
            return
        user = get_user_by_telegram_id(db, message.from_user.id)
        if user is None:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.")
            return
        if getattr(user, "role", None) != "manager":
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.")
            return
        from app.infrastructure.repositories.crud import get_restaurants_by_manager
        manager_id = int(getattr(user, 'id', 0))
        restaurants = get_restaurants_by_manager(db, manager_id)
        if not restaurants:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:\n"
                "http://localhost:8000/manage/restaurants/create"
            )
        else:
            restaurant = restaurants[0]
            await message.answer(
                f"–í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ–Ω—é: http://localhost:8000/restaurants/{restaurant.id}"
            )
    finally:
        db.close() 