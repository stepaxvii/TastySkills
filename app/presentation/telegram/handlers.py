import os
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.domain.entities.telegram_states import RegistrationStates
from app.application.services.telegram_service import TelegramService
from app.presentation.telegram.keyboards.registration import get_registration_choice_keyboard
from app.presentation.telegram.keyboards.menu import get_manager_menu_keyboard
from app.presentation.telegram.keyboards.callback_data.registration import CDRegisterManager, CDRegisterInvitation, CDCopyInviteCode
from app.presentation.telegram.keyboards.locale import ButtonTexts
from app.infrastructure.database.database import SessionLocal
from app.infrastructure.repositories.crud import get_user_by_telegram_id, get_user_by_username, create_user
from app.domain.entities.schemas import UserCreate
from dotenv import load_dotenv

load_dotenv()

ADMIN_ID = os.getenv("ADMIN_ID", "861742986")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "boba")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "paper1234")

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id # type: ignore
    
    db = SessionLocal()
    try:
        # --- –ê–í–¢–û–°–û–ó–î–ê–ù–ò–ï –ê–î–ú–ò–ù–ê ---
        if str(user_id) == ADMIN_ID:
            admin = get_user_by_username(db, ADMIN_USERNAME)
            if not admin:
                user_data = UserCreate(
                    username=ADMIN_USERNAME,
                    password=ADMIN_PASSWORD,
                    role="admin"
                )
                create_user(db, user_data)
                await message.answer(f"‚úÖ\n–õ–æ–≥–∏–Ω: {ADMIN_USERNAME}\n–ü–∞—Ä–æ–ª—å: {ADMIN_PASSWORD}")
                return
            else:
                await message.answer(f"üëë –ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {ADMIN_USERNAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = get_user_by_telegram_id(db, user_id)
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if user.role == "admin":  # type: ignore
                await message.answer(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.telegram_first_name or user.username}!\n\n"
                    f"üëë –†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                    f"üîó –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://...\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
                )
            elif user.role == "manager":  # type: ignore
                await message.answer(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.telegram_first_name or user.username}!\n\n"
                    f"üëë –†–æ–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä\n"
                    f"üîó –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://...\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                    reply_markup=get_manager_menu_keyboard()
                )
            else:  # waiter
                await message.answer(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.telegram_first_name or user.username}!\n\n"
                    f"üë§ –†–æ–ª—å: –û—Ñ–∏—Ü–∏–∞–Ω—Ç\n"
                    f"üîó –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://...\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é."
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã start –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        start_param = message.text.split()[1] if message.text and len(message.text.split()) > 1 else None
        
        if start_param and start_param.startswith("invite_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            invitation_code = start_param[7:]  # –£–±–∏—Ä–∞–µ–º "invite_"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            invitation_data = TelegramService.process_invitation_code(db, invitation_code)
            
            if invitation_data:
                if invitation_data["type"] == "manager_link":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
                    await state.update_data(
                        registration_type="waiter",
                        manager_id=invitation_data["manager_id"]
                    )
                    await state.set_state(RegistrationStates.waiting_for_username)
                    await message.answer(
                        f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
                        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n"
                        f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {invitation_data['manager_username']}\n"
                        f"–í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç.\n\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
                    )
                else:  # invitation
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
                    await state.update_data(
                        registration_type="waiter",
                        invitation_id=invitation_data["invitation_id"],
                        manager_id=invitation_data["manager_id"]
                    )
                    await state.set_state(RegistrationStates.waiting_for_username)
                    await message.answer(
                        f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\n\n"
                        f"‚úÖ –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n"
                        f"–í—ã –±—É–¥–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç.\n\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
                    )
            else:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                    reply_markup=get_registration_choice_keyboard()
                )
                await state.set_state(RegistrationStates.waiting_for_registration_choice)
        else:
            # –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            await message.answer(
                "ü§ñ TastySkills Bot\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=get_registration_choice_keyboard()
            )
            await state.set_state(RegistrationStates.waiting_for_registration_choice)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        db.close()

@router.callback_query(CDRegisterManager.filter() | CDRegisterInvitation.filter())
async def process_registration_choice(callback_query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback_query.answer()
    
    if isinstance(callback_query.data, CDRegisterManager):
        await state.update_data(registration_type="manager")
        await state.set_state(RegistrationStates.waiting_for_username)
        if callback_query.message:
            await callback_query.message.answer(
                "üëë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
            )
    else:  # register_invitation
        await state.update_data(registration_type="waiter")
        await state.set_state(RegistrationStates.waiting_for_invitation)
        if callback_query.message:
            await callback_query.message.answer(
                "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:"
            )

@router.message(RegistrationStates.waiting_for_invitation)
async def process_invitation(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    invitation_code = message.text.strip() if message.text else ""
    
    db = SessionLocal()
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invitation_data = TelegramService.process_invitation_code(db, invitation_code)
        
        if invitation_data:
            if invitation_data["type"] == "manager_link":
                await state.update_data(
                    manager_id=invitation_data["manager_id"]
                )
            else:  # invitation
                await state.update_data(
                    invitation_id=invitation_data["invitation_id"],
                    manager_id=invitation_data["manager_id"]
                )
            
            await state.set_state(RegistrationStates.waiting_for_username)
            await message.answer(
                "‚úÖ –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)"
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—ã—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        db.close()

@router.message(RegistrationStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞"""
    username = message.text.strip() if message.text else ""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
    is_valid, error_msg = TelegramService.validate_username(username)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(username=username)
    await state.set_state(RegistrationStates.waiting_for_password)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n"
        "(–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

@router.message(RegistrationStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    password = message.text if message.text else ""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    is_valid, error_msg = TelegramService.validate_password(password)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(password=password)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_data = await state.get_data()
    registration_type = user_data.get('registration_type', 'waiter')
    
    if registration_type == "manager":
        await complete_registration(message, state, "manager")
    else:
        await complete_registration(message, state, "waiter")

async def complete_registration(message: Message, state: FSMContext, role: str = "waiter") -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_data = await state.get_data()
    username = user_data.get('username')
    password = user_data.get('password')
    
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: username={username}, role={role}")
    
    if not username or not password:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}, —Ä–æ–ª—å: {role}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = SessionLocal()
    try:
        assert message.from_user is not None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
        telegram_data = {
            'id': message.from_user.id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = TelegramService.register_user(
            db=db,
            username=username,
            password=password,
            role=role,
            telegram_data=telegram_data,
            manager_id=user_data.get('manager_id'),
            invitation_id=user_data.get('invitation_id')
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user.id}")
        
        if role == "manager":
            await message.answer(
                f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: {username}\n"
                f"üëë –†–æ–ª—å: –ú–µ–Ω–µ–¥–∂–µ—Ä\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '{ButtonTexts.INVITATION_LINK}'",
                reply_markup=get_manager_menu_keyboard()
            )
        else:
            await message.answer(
                f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üë§ –õ–æ–≥–∏–Ω: {username}\n"
                f"üëë –†–æ–ª—å: –û—Ñ–∏—Ü–∏–∞–Ω—Ç\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é.\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://..."
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.message(F.text == ButtonTexts.CREATE_INVITATION)
async def create_invitation(message: Message, bot: Bot) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    db = SessionLocal()
    
    try:
        user = get_user_by_telegram_id(db, user_id)
        if not user or user.role != "manager":  # type: ignore
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
        bot_username = (await bot.get_me()).username or ""
        waiter_link = TelegramService.create_manager_invitation_link(db, user, bot_username)
        
        if user.waiter_link == waiter_link:  # type: ignore
            # –°—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞
            await message.answer(
                f"üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ TastySkills:\n\n"
                f"üîó {waiter_link}\n\n"
            )
            await message.answer(
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ TastySkills."
            )
        else:
            # –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            await message.answer(
                f"üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ TastySkills:\n\n"
                f"üîó {waiter_link}\n\n"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")
    finally:
        db.close()

@router.message(F.text == ButtonTexts.MY_WAITERS)
async def show_waiters(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    assert message.from_user is not None
    user_id = message.from_user.id
    db = SessionLocal()
    
    try:
        user = get_user_by_telegram_id(db, user_id)
        if not user or user.role != "manager":  # type: ignore
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
            return
        
        manager_id = int(getattr(user, 'id', 0))
        waiters = TelegramService.get_manager_waiters(db, manager_id)
        
        if waiters:
            waiters_text = f"üë• –í–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã ({len(waiters)}):\n\n"
            for i, waiter in enumerate(waiters, 1):
                waiters_text += f"{i}. {waiter.username}\n"
                if waiter.telegram_first_name:  # type: ignore
                    waiters_text += f"   –ò–º—è: {waiter.telegram_first_name}\n"
                waiters_text += f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {waiter.created_at.strftime('%d.%m.%Y')}\n\n"
        else:
            waiters_text = "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞."
        
        await message.answer(waiters_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
    finally:
        db.close()

@router.message(F.text == ButtonTexts.CREATE_RESTAURANT)
async def start_create_restaurant(message: Message) -> None:
    db = SessionLocal()
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
            return
        user = get_user_by_telegram_id(db, message.from_user.id)
        if user is None:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.")
            return
        if getattr(user, "role", None) != "manager":
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.")
            return
        # –¢–µ–ø–µ—Ä—å user –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ None
        from app.infrastructure.repositories.crud import get_restaurants_by_manager
        manager_id = int(getattr(user, 'id', 0))
        restaurants = get_restaurants_by_manager(db, manager_id)
        if not restaurants:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:\n"
                "http://localhost:8000/manage/restaurants/create"
            )
        else:
            restaurant = restaurants[0]
            await message.answer(
                f"–í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –º–µ–Ω—é: http://localhost:8000/restaurants/{restaurant.id}"
            )
    finally:
        db.close()

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    db = SessionLocal()
    try:
        user = None
        if message.from_user:
            user = get_user_by_telegram_id(db, message.from_user.id)
        if user:
            await message.answer(
                f"ü§ñ TastySkills\n\n"
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n"
                f"üë§ –õ–æ–≥–∏–Ω: {user.username}\n"
                f"üîë –ü–∞—Ä–æ–ª—å: (–≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–π)\n\n"
                f"–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset_password –¥–ª—è –µ–≥–æ —Å–±—Ä–æ—Å–∞.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                f"/reset_password - –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å\n\n"
                f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é."
            )
        else:
            await message.answer(
                "ü§ñ TastySkills\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/reset_password - –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å\n\n"
                "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é."
            )
    finally:
        db.close()

@router.message(Command("reset_password"))
async def cmd_reset_password(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_password"""
    db = SessionLocal()
    try:
        user = None
        if message.from_user:
            user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        await state.set_state(RegistrationStates.waiting_for_new_password)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:\n(–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
    finally:
        db.close()

@router.message(RegistrationStates.waiting_for_new_password)
async def process_new_password(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞"""
    new_password = message.text if message.text else ""
    is_valid, error_msg = TelegramService.validate_password(new_password)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    user_data = await state.get_data()
    db = SessionLocal()
    try:
        user = None
        if message.from_user:
            user = get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            await state.clear()
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from app.presentation.api.auth import get_password_hash
        setattr(user, "hashed_password", get_password_hash(new_password))
        db.commit()
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
        await state.clear()
    finally:
        db.close()

@router.callback_query(CDCopyInviteCode.filter())
async def copy_invite_code(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    await callback_query.answer("üìã –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

@router.message()
async def echo_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    ) 