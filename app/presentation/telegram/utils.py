"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Telegram –±–æ—Ç–∞
"""
import logging
from contextlib import asynccontextmanager
from typing import Optional
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session

from app.infrastructure.database.database import SessionLocal
from app.infrastructure.repositories.crud import get_user_by_telegram_id, get_user_by_username
from app.presentation.telegram.keyboards import get_admin_menu_keyboard, get_manager_menu_keyboard, get_waiter_menu_keyboard
import os
from dotenv import load_dotenv

load_dotenv()

ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "boba")
logger = logging.getLogger(__name__)


@asynccontextmanager
async def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def get_user_safely(db: Session, user_id: int, admin_username: str = ADMIN_USERNAME) -> Optional[object]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–Ω–∞—á–∞–ª–∞ –ø–æ telegram_id, –∑–∞—Ç–µ–º –ø–æ username
    """
    user = get_user_by_telegram_id(db, user_id)
    if not user:
        user = get_user_by_username(db, admin_username)
    return user


def is_admin_user(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user and (user.role == "admin" or user.username == ADMIN_USERNAME)


def is_manager_user(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    return user and user.role == "manager"


def is_waiter_user(user) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º"""
    return user and user.role == "waiter"


async def send_welcome_message(message: Message, user, role: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    role_emojis = {
        "admin": "üëë",
        "manager": "üëë", 
        "waiter": "üë§"
    }
    
    role_names = {
        "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä",
        "waiter": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç"
    }
    
    role_keyboards = {
        "admin": get_admin_menu_keyboard(),
        "manager": get_manager_menu_keyboard(),
        "waiter": get_waiter_menu_keyboard()
    }
    
    action_text = "—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" if role in ["admin", "manager"] else "—Ä–∞–±–æ—Ç—ã"
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.telegram_first_name or user.username}!\n\n"
        f"{role_emojis[role]} –†–æ–ª—å: {role_names[role]}\n"
        f"üîó –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://...\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è {action_text}:",
        reply_markup=role_keyboards[role]
    )


def create_copy_code_keyboard(invite_code: str, callback_prefix: str = "copy_invite_code") -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    if not invite_code:
        return None
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"{callback_prefix}:{invite_code}")]
        ]
    )


def extract_invite_code_from_link(link: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏"""
    if link and 'invite_' in link:
        return link.split('invite_')[-1]
    return None


def get_role_permission_message(role: str, action: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–ª–∏"""
    role_messages = {
        "admin": f"‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç {action}.",
        "manager": f"‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç {action}.",
        "waiter": f"‚ùå –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –º–æ–≥—É—Ç {action}."
    }
    return role_messages.get(role, f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è {action}.")


async def handle_database_error(message: Message, error: Exception, action: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {action}: {error}")
    await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ {action}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.") 